import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;

import java.util.Random;

public class App extends Application {
    private HangmanGameFX hangmanGame;
    private Label wordLabel;
    private Label attemptsLabel;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Hangman Game");

        // Title page
        BorderPane titlePane = createTitlePage(primaryStage);
        Scene titleScene = new Scene(titlePane, 400, 300);

        // Set up the game
        hangmanGame = new HangmanGameFX();

        // Main game scene
        BorderPane gamePane = createGamePane(primaryStage);
        Scene gameScene = new Scene(gamePane, 400, 300);

        // Switch to the game scene when the start button is clicked
        Button startButton = (Button) titlePane.lookup("#startButton");
        startButton.setOnAction(e -> {
            hangmanGame.setWordLength(getSelectedWordLength(titlePane));
            hangmanGame.reset();
            updateGameUI();
            primaryStage.setScene(gameScene);
        });

        // Start with the title scene
        primaryStage.setScene(titleScene);
        primaryStage.show();
    }

    private BorderPane createTitlePage(Stage primaryStage) {
        BorderPane titlePane = new BorderPane();
        titlePane.setStyle("-fx-background-color: #4CAF50;");

        Label titleLabel = new Label("Hangman Game");
        titleLabel.setStyle("-fx-font-size: 24; -fx-font-weight: bold; -fx-text-fill: white;");
        titlePane.setTop(titleLabel);
        BorderPane.setAlignment(titleLabel, Pos.CENTER);

        VBox optionsBox = new VBox(10);
        optionsBox.setAlignment(Pos.CENTER);

        // Word length selection
        Label lengthLabel = new Label("Select Word Length:");
        ComboBox<Integer> lengthComboBox = new ComboBox<>();
        lengthComboBox.getItems().addAll(3, 4, 5, 6, 7, 8, 9, 10); // Customize the lengths as needed
        lengthComboBox.setValue(5); // Default word length
        optionsBox.getChildren().addAll(lengthLabel, lengthComboBox);

        Button startButton = new Button("Start Game");
        startButton.setId("startButton");
        optionsBox.getChildren().add(startButton);
        BorderPane.setAlignment(startButton, Pos.CENTER);

        titlePane.setCenter(optionsBox);
        return titlePane;
    }

    private int getSelectedWordLength(BorderPane titlePane) {
        ComboBox<Integer> lengthComboBox = (ComboBox<Integer>) titlePane.lookup(".comboBox");
        return lengthComboBox.getValue();
    }

    private BorderPane createGamePane(Stage primaryStage) {
        BorderPane gamePane = new BorderPane();
        gamePane.setStyle("-fx-background-color: #90EE90;");

        // Word label
        wordLabel = new Label(hangmanGame.getGuessedWord());
        wordLabel.setStyle("-fx-font-weight: bold;");
        wordLabel.setWrapText(true);
        gamePane.setTop(wordLabel);
        BorderPane.setAlignment(wordLabel, Pos.CENTER);

        // Attempts label
        attemptsLabel = new Label("Attempts left: " + hangmanGame.getAttemptsLeft());
        attemptsLabel.setStyle("-fx-font-weight: bold;");
        gamePane.setCenter(attemptsLabel);
        BorderPane.setAlignment(attemptsLabel, Pos.CENTER);

        // Guess input
        TextField guessInput = new TextField();
        guessInput.setPromptText("Enter a letter");
        guessInput.setAlignment(Pos.CENTER);
        guessInput.setOnAction(e -> makeGuess(guessInput.getText()));
        gamePane.setBottom(guessInput);
        BorderPane.setAlignment(guessInput, Pos.CENTER);

        // Reset button
        Button resetButton = new Button("Reset");
        resetButton.setOnAction(e -> {
            hangmanGame.reset();
            updateGameUI();
        });
        VBox buttonBox = new VBox(10, guessInput, resetButton);
        buttonBox.setAlignment(Pos.CENTER);
        gamePane.setBottom(buttonBox);

        return gamePane;
    }

    private void makeGuess(String guess) {
        if (guess.length() == 1) {
            char letterGuess = guess.toLowerCase().charAt(0);
            hangmanGame.makeGuess(letterGuess);
        }

        updateGameUI();

        if (hangmanGame.isGameOver()) {
            Stage primaryStage;
            showGameOverPopup(primaryStage);
        }
    }

    private void updateGameUI() {
        wordLabel.setText(hangmanGame.getGuessedWord());
        attemptsLabel.setText("Attempts left: " + hangmanGame.getAttemptsLeft());
    }

    private void showGameOverPopup(Stage primaryStage) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Game Over");
        alert.setHeaderText(null);

        if (hangmanGame.isGameWon()) {
            alert.setContentText("Congratulations! You guessed the word: " + hangmanGame.getSecretWord());
        } else {
            alert.setContentText("Sorry! The correct word was: " + hangmanGame.getSecretWord());
        }

        alert.setOnHidden(e -> {
            // Reset the game and update UI after closing the alert
            hangmanGame.reset();
            updateGameUI();
            primaryStage.setScene(createTitleScene(primaryStage));
        });

        alert.show();
    }

    private Scene createTitleScene(Stage primaryStage) {
        BorderPane titlePane = createTitlePage(primaryStage);
        return new Scene(titlePane, 400, 300);
    }
}

class HangmanGameFX {
    private String[] words = {"java", "hangman", "programming", "computer", "algorithm", "openai", "gpt", "interface", "application", "development", "keyboard", "language", "cryptography", "encryption"};
    private String secretWord;
    private StringBuilder guessedWord;
    private int maxAttempts;
    private int attemptsLeft;
    private int wordLength;

    public HangmanGameFX() {
        reset();
    }

    public void setWordLength(int length) {
        this.wordLength = length;
    }

    public void reset() {
        this.secretWord = selectRandomWord();
        this.maxAttempts = secretWord.length() + 2;
        this.attemptsLeft = maxAttempts;
        this.guessedWord = new StringBuilder("_".repeat(secretWord.length()));
    }

    public boolean isGameOver() {
        return attemptsLeft <= 0 || guessedWord.toString().equals(secretWord);
    }

    public boolean isGameWon() {
        return guessedWord.toString().equals(secretWord);
    }

    public String getGuessedWord() {
        return guessedWord.toString();
    }

    public int getAttemptsLeft() {
        return attemptsLeft;
    }

    public String getSecretWord() {
        return secretWord;
    }

    public void makeGuess(char guess) {
        if (!Character.isLetter(guess)) {
            return;
        }

        guess = Character.toLowerCase(guess);

        if (secretWord.indexOf(guess) == -1) {
            attemptsLeft--;
        } else {
            updateGuessedWord(guess);
        }
    }

    /**
     * @param guess
     */
    private void updateGuessedWord(char guess) {
    }

    private String selectRandomWord() {
        Random random = new Random();
        String selectedWord = "";
        do {
                selectedWord = words[random.nextInt(words.length)];
        } while (selectedWord.length() != wordLength);
        return selectedWord;
    }

    /**
     * @param guess
     */
    private void updateGuessedWord(char guess) {
        for (int i = 0; i < secretWord.length(); i++) {
            if (secretWord.charAt(i) == guess) {
                guessedWord.setCharAt(i, guess);
            }
        }
    }
}


