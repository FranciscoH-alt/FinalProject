import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class HangmanFX extends Application {
    private HangmanGameFX hangmanGame;
    private Label wordLabel;
    private Label attemptsLabel;
    private Button startOverButton;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Hangman Game");

        // Title page
        BorderPane titlePane = createTitlePage(primaryStage);
        Scene titleScene = new Scene(titlePane, 400, 300);

        // Set up the game
        hangmanGame = new HangmanGameFX();

        // Main game scene
        BorderPane gamePane = createGamePane(primaryStage);
        Scene gameScene = new Scene(gamePane, 400, 300);

        // Switch to the game scene when the start button is clicked
        Button startButton = (Button) titlePane.lookup("#startButton");
        startButton.setOnAction(e -> {
            hangmanGame.reset();
            updateGameUI();
            primaryStage.setScene(gameScene);
        });

        // Start with the title scene
        primaryStage.setScene(titleScene);
        primaryStage.show();
    }

    // Create the title page
    private BorderPane createTitlePage(Stage primaryStage) {
        BorderPane titlePane = new BorderPane();
        titlePane.setStyle("-fx-background-color: #4CAF50;");

        Label titleLabel = new Label("Hangman Game");
        titleLabel.setFont(new Font("Arial", 32));
        titleLabel.setTextFill(Color.WHITE);
        titlePane.setTop(titleLabel);
        BorderPane.setAlignment(titleLabel, Pos.CENTER);

        Button startButton = new Button("Start Game");
        startButton.setId("startButton");
        titlePane.setCenter(startButton);
        BorderPane.setAlignment(startButton, Pos.CENTER);

        return titlePane;
    }

    // Create the main game pane
    private BorderPane createGamePane(Stage primaryStage) {
        BorderPane gamePane = new BorderPane();
        gamePane.setStyle("-fx-background-color: #90EE90;");

        // Word label
        wordLabel = new Label(hangmanGame.getGuessedWord());
        wordLabel.setFont(new Font("Arial", 20));
        gamePane.setTop(wordLabel);
        BorderPane.setAlignment(wordLabel, Pos.CENTER);

        // Attempts label
        attemptsLabel = new Label("Attempts left: " + hangmanGame.getAttemptsLeft());
        attemptsLabel.setFont(new Font("Arial", 16));
        gamePane.setCenter(attemptsLabel);
        BorderPane.setAlignment(attemptsLabel, Pos.CENTER);

        // Guess input
        TextField guessInput = new TextField();
        guessInput.setPromptText("Enter a letter or the whole word");
        guessInput.setAlignment(Pos.CENTER);
        guessInput.setOnAction(e -> makeGuess(guessInput.getText()));
        gamePane.setBottom(guessInput);
        BorderPane.setAlignment(guessInput, Pos.CENTER);

        // Start Over button
        startOverButton = new Button("Start Over");
        startOverButton.setOnAction(e -> {
            hangmanGame.reset();
            updateGameUI();
            primaryStage.setScene(createTitleScene(primaryStage));
        });
        startOverButton.setVisible(false);

        VBox bottomBox = new VBox(10, guessInput, startOverButton);
        bottomBox.setAlignment(Pos.CENTER);
        gamePane.setBottom(bottomBox);

        return gamePane;
    }

    // Create the title scene
    private Scene createTitleScene(Stage primaryStage) {
        BorderPane titlePane = createTitlePage(primaryStage);
        return new Scene(titlePane, 400, 300);
    }

    // Handle making a guess
    private void makeGuess(String guess) {
        if (guess.length() == 1) {
            char letterGuess = guess.toLowerCase().charAt(0);
            hangmanGame.makeGuess(letterGuess);
        } else if (guess.length() > 1) {
            hangmanGame.makeWordGuess(guess.toLowerCase());
        }

        updateGameUI();

        if (hangmanGame.isGameOver()) {
            showGameOverPopup();
        }
    }

    // Update the game UI
    private void updateGameUI() {
        wordLabel.setText(hangmanGame.getGuessedWord());
        attemptsLabel.setText("Attempts left: " + hangmanGame.getAttemptsLeft());

        if (hangmanGame.isGameOver()) {
            startOverButton.setVisible(true);
        }
    }

    // Show the game over popup
    private void showGameOverPopup() {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Game Over");
        alert.setHeaderText(null);

        if (hangmanGame.isGameWon()) {
            alert.setContentText("Congratulations! You guessed the word: " + hangmanGame.getSecretWord());
        } else {
            alert.setContentText("Sorry! The correct word was: " + hangmanGame.getSecretWord());
        }

        alert.showAndWait();
    }
}

// Hangman game logic
class HangmanGameFX {
    private String[] words = {"java", "hangman", "programming", "computer", "algorithm"};
    private String secretWord;
    private StringBuilder guessedWord;
    private int maxAttempts;
    private int attemptsLeft;

    // Constructor
    public HangmanGameFX() {
        reset();
    }

    // Reset the game
    public void reset() {
        this.secretWord = selectRandomWord();
        this.maxAttempts = secretWord.length() + 2;
        this.attemptsLeft = maxAttempts;
        this.guessedWord = new StringBuilder("_".repeat(secretWord.length()));
    }

    // Check if the game is over
    public boolean isGameOver() {
        return attemptsLeft <= 0 || guessedWord.toString().equals(secretWord);
    }

    // Check if the game is won
    public boolean isGameWon() {
        return guessedWord.toString().equals(secretWord);
    }

    // Get the guessed word
    public String getGuessedWord() {
        return guessedWord.toString();
    }

    // Get the attempts left
    public int getAttemptsLeft() {
        return attemptsLeft;
    }

    // Get the secret word
    public String getSecretWord() {
        return secretWord;
    }

    // Make a letter guess
    public void makeGuess(char guess) {
        if (!Character.isLetter(guess)) {
            return;
        }

        guess = Character.toLowerCase(guess);

        if (secretWord.indexOf(guess) == -1) {
            attemptsLeft--;
        } else {
            updateGuessedWord(guess);
        }
    }

    // Make a word guess
    public void makeWordGuess(String wordGuess) {
        if (wordGuess.equals(secretWord)) {
            guessedWord = new StringBuilder(secretWord);
        } else {
            attemptsLeft--;
        }
    }

    // Select a random word
    private String select
